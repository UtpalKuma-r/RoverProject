import cv2
import rclpy
from sensor_msgs.msg import Image
from rclpy.node import Node
from cv_bridge import CvBridge
from std_srvs.srv import SetBool  # Import the service type

class SubscriberNodeClass(Node):
    def __init__(self):
        super().__init__('subscriber_node')
        self.bridgeObject = CvBridge()
        self.topicNameFrames = 'topic_camera_image'
        self.queueSize = 20
        self.subscription = self.create_subscription(
            Image, self.topicNameFrames, self.listener_callback_function, self.queueSize
        )
        self.subscription
        
        # Create a client for the switch camera service
        self.client = self.create_client(SetBool, 'switch_camera')
        while not self.client.wait_for_service(timeout_sec=1.0):
           self.get_logger().info('Service not available, waiting again...')

    def listener_callback_function(self, imageMessage):
        self.get_logger().info('The image frame is received')
        openCVImage = self.bridgeObject.imgmsg_to_cv2(imageMessage)
        cv2.imshow("Camera Video", openCVImage)
        cv2.waitKey(1)

    def switch_camera(self):
        request = SetBool.Request()
        future = self.client.call_async(request)
        
        rclpy.spin_until_future_complete(self, future)
        if future.result() is not None:
            self.get_logger().info(f'Switch response: {future.result().message}')
        else:
            self.get_logger().error('Exception while calling service: %r' % (future.exception(),))

def main(args=None):
    rclpy.init(args=args)
    subscriberNode = SubscriberNodeClass()
    
    # Example to switch cameras after a delay
    rclpy.spin_once(subscriberNode)  # Spin once to process subscriptions before switching
    subscriberNode.switch_camera()    # Call the switch camera function

    rclpy.spin(subscriberNode)
    subscriberNode.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
